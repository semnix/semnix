# SPDX-FileCopyrightText: 2023 Christina Sørensen
# SPDX-FileContributor: Christina Sørensen
#
# SPDX-License-Identifier: AGPL-3.0-only

# Pulls each Submodule.
pullEach:
    git submodule foreach git pull

# Add repo to semnix
addRepo REPO REMOTE:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos
    git clone {{REMOTE}}
    cd ..
    git submodule add {{REMOTE}} repos/{{REPO}}

# Bump all submodules with upstream.
bumpFromUpstream:
    just pullEach
    just flake-utils
    just naersk
    just treefmt-nix
    just rust-overlay
    just pre-commit-hooks-nix
    git submodule status

bumpRepo REPO:
    just bumpFromUpstream
    just bumpRepoBash {{REPO}}

bumpRepoBash REPO:
    #!/usr/bin/env bash
    set -euxo pipefail
    # Ensure we have the latest and greatest
    cd repos/{{REPO}}

    gh repo set-default "semnix/{{REPO}}"
    new_version="$(convco version --bump)"
    git tag -d "v$new_version" || echo "tag not found, creating";
    git tag --sign -a "v$new_version" -m "auto generated by semnix for {{REPO}} v$(convco version)"
    git push origin "v$new_version"
    gh release create "v$(convco version)" --target "$(git rev-parse HEAD)" --title "{{REPO}} v$(convco version)" --generate-notes

    cd ../..

bumpRepoBashV REPO VERSION:
    #!/usr/bin/env bash
    set -euxo pipefail
    # Ensure we have the latest and greatest
    cd repos/{{REPO}}

    gh repo set-default "semnix/{{REPO}}"
    new_version="{{VERSION}}"
    git tag -d "v$new_version" || echo "tag not found, creating";
    git tag --sign -a "v$new_version" -m "auto generated by semnix for {{REPO}} v$(convco version)"
    git push origin "v$new_version"
    gh release create "v$(convco version)" --target "$(git rev-parse HEAD)" --title "{{REPO}} v$(convco version)" --generate-notes

    cd ../..


# --- Upstream Helpers
# These are DRY DRY DRY, should be made into a single recipe


# Ensures a upstream remote exists and rebase it on top of submodule.
flake-utils:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos/flake-utils
    # We ignore errors because it's likely it already exists
    git remote add upstream git@github.com:numtide/flake-utils.git && echo "added upstream" || echo "upstream already exists";
    git fetch upstream
    git rebase upstream/main
    git push
    cd ../..

# Ensures a upstream remote exists and rebase it on top of submodule.
naersk:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos/naersk
    # We ignore errors because it's likely it already exists
    git remote add upstream git@github.com:nix-community/naersk.git && echo "added upstream" || echo "upstream already exists";
    git fetch upstream
    git rebase upstream/master
    git push
    cd ../..

# Ensures a upstream remote exists and rebase it on top of submodule.
treefmt-nix:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos/treefmt-nix
    # We ignore errors because it's likely it already exists
    git remote add upstream git@github.com:numtide/treefmt-nix.git && echo "added upstream" || echo "upstream already exists";
    git fetch upstream
    git rebase upstream/main
    git push
    cd ../..

# Ensures a upstream remote exists and rebase it on top of submodule.
rust-overlay:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos/rust-overlay
    # We ignore errors because it's likely it already exists
    git remote add upstream git@github.com:oxalica/rust-overlay.git && echo "added upstream" || echo "upstream already exists";
    git fetch upstream
    git rebase upstream/master
    git push
    cd ../..

# BUG: Original name causes issues, can't have .
# Ensures a upstream remote exists and rebase it on top of submodule.
pre-commit-hooks-nix:
    #!/usr/bin/env bash
    set -euxo pipefail
    cd repos/pre-commit-hooks.nix
    # We ignore errors because it's likely it already exists
    git remote add upstream git@github.com:cachix/pre-commit-hooks.nix.git && echo "added upstream" || echo "upstream already exists";
    git fetch upstream
    git rebase upstream/master
    git push
    cd ../..

# ---
